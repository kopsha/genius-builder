#!/usr/bin/env bash
set -euo pipefail

declare -a ANDROID_ABIs=(
    arm64-v8a
    armeabi-v7a
    x86_64
    x86
)

declare -a LINUX_ABIs=(
    x86_64
)

build_dist()
{
    platform=$1; shift
    abi=$1; shift
    extra_args=$@

    # WARN: assumed running inside build folder
    rm -rf *
    cmake -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake" \
        -DANDROID_PLATFORM="android-21" \
        -DANDROID_ABI=$abi \
        -DCMAKE_ANDROID_ARCH_ABI=$abi \
        -DANDROID_STL="c++_static" \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DCMAKE_LIBRARY_OUTPUT_DIRECTORY="/dist/${platform}-${abi}" \
        -DTARGET_PLATFORM=${platform} \
        -DTARGET_ABI=${abi} \
        ${extra_args} \
        -S /source
    cmake --build .
    cmake --install . --prefix "/dist/${platform}-${abi}"
    cat > "/dist/${platform}-${abi}/.version" <<END
# build version details
VERSION=${VERSION}
CONTEXT=${CONTEXT}
END
    echo "-- ${platform}-${abi} is ready for distribution"
}

build_linux()
{
    rm -rf *
    platform=linux
    abi=x86_64
    extra_args=$@
    cmake -DTARGET_PLATFORM=${platform} \
        -DTARGET_ABI=${abi} \
        $extra_args -S /source
    cmake --build .
}

run_tests()
{
    ctest --output-on-failure --test-dir ./tests
}

main()
{
    goal=$1; shift
    case $goal in
        shell)
            bash
            ;;

        debug|release)
            export CMAKE_BUILD_TYPE=${goal^};
            EXTRA_CMAKE_ARGS=$@

            for abi in "${LINUX_ABIs[@]}"; do
                build_dist linux $abi $EXTRA_CMAKE_ARGS
            done

            for abi in "${ANDROID_ABIs[@]}"; do
                build_dist android $abi $EXTRA_CMAKE_ARGS
            done
            ;;

        test)
            export CMAKE_BUILD_TYPE=Debug
            EXTRA_CMAKE_ARGS=$@
            build_linux -DBUILD_TESTS=ON $EXTRA_CMAKE_ARGS
            run_tests
            ;;

        *)
            "$@"
            ;;
    esac
}

printf "\t..: Preparing $VERSION [$CONTEXT] :..\n"
main "$@"
